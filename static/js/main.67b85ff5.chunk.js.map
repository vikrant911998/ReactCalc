{"version":3,"sources":["container/Calc.js","components/Button.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Calc","buttons","event","value","target","this","clearAll","deleteLast","evaluateExpression","postInput","result","eval","refs","expr","characters","split","pop","item","checkOperator","expression","lastCharacter","temp3","length","last1","last2","last3","push","className","type","ref","placeholder","takeInput","bind","Component","Button","props","element","onClick","Input","firstRow","slice","secondRow","thirdRow","fourthRow","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67b85ff5.chunk.js","sourcesContent":["import { Component } from 'react';\nimport React from 'react';\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Input } from '../components/Input';\n\nexport class Calc extends Component{\n\n    constructor(){\n        super();\n        this.buttons = [1,2,3,'+',5,6,7,'-',8,9,0,'*','/','=','C','DEL'];\n    }\n\n    takeInput(event){\n        let value = event.target.value;\n        if(value === 'C'){\n            this.clearAll();\n        }\n        else if(value === 'DEL'){\n            this.deleteLast();\n        }\n        else if(value === '='){\n            this.evaluateExpression();\n        }\n        else {\n            this.postInput(value);    \n        }\n        \n    }\n\n    evaluateExpression(){\n        \n        let result = eval(this.refs.expr.value);\n        this.refs.expr.value = result;\n    }\n\n    clearAll(){\n        \n        this.refs.expr.value = \"\";\n    }\n\n    deleteLast(){\n        \n        let characters = this.refs.expr.value.split('');\n        characters.pop();\n        this.refs.expr.value = \"\";\n\n        for(let item of characters){\n            this.refs.expr.value +=item;\n        }\n    }\n\n    postInput(value){\n        this.refs.expr.value += value;\n        this.checkOperator(this.refs.expr.value);\n    }\n\n    checkOperator(expression){\n        \n        let operators = ['+','-','*','/'];\n        let characters = expression.split('');\n        let length = characters.length;\n\n        let last1 = false;\n        let last2 = false;\n        let last3 = false;\n        let lastCharacter;\n        let temp3;\n\n        for(let item of operators){\n            if(characters[length-1] === item){\n                last1 = true;\n            }\n            if(characters[length-2] === item){\n\n                if(characters[length-2] === '*' && characters[length-1]==='-'){\n                }\n                else{\n                    last2 = true;   \n                }   \n            }\n            if(characters[length-3]==='*' && characters[length-2] ==='-' && characters[length-1]===item){\n                last3 = true;\n            }\n        }\n\n        if(last3){\n            temp3 = characters.pop();\n            characters.pop();\n            characters.pop();\n            characters.push(temp3);\n        }\n        else if(last1 && last2){\n            lastCharacter = characters.pop();\n            characters.pop();\n            characters.push(lastCharacter);\n        }\n        \n        this.refs.expr.value = \"\";\n        for(let item of characters){\n            this.refs.expr.value += item;\n        }\n        \n    }\n\n    render(){\n        return (\n            <div className=\"container top-div p-5\">\n                <h1 className=\"alert-info text-center rounded p-2\">React Calculator</h1>\n                <br/>\n                <br/>\n                <div className=\"row justify-content-center\">\n                    <input type=\"text\" ref=\"expr\" placeholder=\"Enter the Expression\" className=\"form-control\"/>\n                </div>\n                <br/>\n                <Input buttons={this.buttons} takeInput={this.takeInput.bind(this)} />\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport const Button = (props)=>{\n    return(\n        <div className=\"col-md-2 col-sm-3 p-2 \">\n            <button value={props.element} className=\"btn btn-light p-3 w-100 size\" onClick={props.takeInput}>{props.element}</button>\n        </div>\n    );\n}","import React from 'react';\nimport { Button } from './Button';\n\nexport const Input = (props)=>{\n    const firstRow = props.buttons.slice(0,4);\n    const secondRow = props.buttons.slice(4,8);\n    const thirdRow = props.buttons.slice(8,12);\n    const fourthRow = props.buttons.slice(12,props.buttons.length);\n    \n\n    return (\n        <div className=\"p-4\">\n            <div className=\"row justify-content-center\">   \n                {firstRow.map(element=><Button key={element} takeInput={props.takeInput} element={element} />)}\n            </div>\n            <div className=\"row justify-content-center\">   \n                {secondRow.map(element=><Button key={element} element={element} takeInput={props.takeInput} />)}\n            </div>\n            <div className=\"row justify-content-center\">   \n                {thirdRow.map(element=><Button element={element} key={element} takeInput={props.takeInput} />)}\n            </div>\n            <div className=\"row justify-content-center\">   \n                {fourthRow.map(element=><Button element={element} key={element} takeInput={props.takeInput} />)}\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport {Calc} from './container/Calc';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"top-div\">\n      <Calc/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}